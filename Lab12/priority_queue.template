#include <cassert>    // Provides assert

template<class T>
priority_queue<T>::priority_queue()
{
    
}
// postcondition: empty priority_queue has been created
template<class T>
void priority_queue<T>::pop()
{
    assert(!empty());
    h.remove();
}
// precondition: priority_queue is not emtpy
// postcondition: highest priority item has been removed
template<class T>
void priority_queue<T>::push (const T& item)
{
    h.insert(item);
}
// postcondition: item has been inserted
template<class T>
bool priority_queue<T>::empty () const
{
    return h.is_empty();
}
// postcondition: returned whether priority queue is empty
template<class T>
unsigned int priority_queue<T>::size() const
{
    return h.size();
}
// postcondition: returned number of items in the priority queue
template<class T>
T priority_queue<T>::top() const
{
    assert(!empty());
    return h.max();
}
// precondition: priority queue is not empty
// postcondition: copy of highest priority item has been returned
template<class T>
void priority_queue<T>::print()
{
    h.display();
}
// postcondition: display all elements