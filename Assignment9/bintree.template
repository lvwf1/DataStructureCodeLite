// FILE: bintree.template
// IMPLEMENTS: The binary_tree node class (see bintree.h for documentation). 
#include <cassert>    // Provides assert
#include <cstdlib>   // Provides NULL, std::size_t
#include <iomanip>    // Provides std::setw
#include <iostream>   // Provides std::cout
#include <queue>     // Provides queue
#include <cmath>     // Provides pow

namespace main_savitch_10
{
    template <class Process, class Item>
    void breadthfirst(Process f, binary_tree_node<Item>* node_ptr)
    {
        std::queue<binary_tree_node<Item>*> q1,q2;
        q2.push(node_ptr);//Store the root in q2
        binary_tree_node<Item>* null=new binary_tree_node<Item>();//Create a binary tree node with null value
        bool lastline=false;//Initially set lastline false
        unsigned int p=0;//Set the restriction of the number of nodes for each line
        while(!lastline)//Run the while loop until lastline sets true
        {
            lastline=true;//Consider each line is the last line
            while(q1.size()<pow(2,p))//Push certain number of nodes into queue1 depending on the branch height
            {
                q1.push(q2.front());//Transplant q2 elements to q1
                if(q2.front()->is_leaf())//The leaf contain two null children
                {
                    q2.push(null);
                    q2.push(null);
                }
                else//The parent will have children pushed into q2
                {
                    if(q2.front()->left()!=NULL&&q2.front()->right()!=NULL)
                    {
                        q2.push(q2.front()->left());
                        q2.push(q2.front()->right());
                    }
                    else if(q2.front()->left()!=NULL)
                    {
                        q2.push(q2.front()->left());
                        q2.push(null);
                    }
                    else if(q2.front()->right()!=NULL)
                    {
                        q2.push(null);
                        q2.push(q2.front()->right());
                    }
                    lastline=false;//If not all elements in the "last line" are leaves, then that's not the last line
                }
                q2.pop();//Clear the current line's elements
            }
            while(!q1.empty())
            {
                f(q1.front());//Process q1's elements
                q1.pop();//Clear q1's elements
            }
            std::cout<<std::endl;
            p++;//Move to the next line, increase the limit of q1 size.
        }
    }
    
    template <class Process, class BTNode>
    void inorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            inorder(f, node_ptr->left( ));
            f( node_ptr->data( ) );
            inorder(f, node_ptr->right( ));
        }
    }

    template <class Process, class BTNode>
    void postorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            postorder(f, node_ptr->left( ));
            postorder(f, node_ptr->right( ));
            f(node_ptr->data( ));
        }
    }

    template <class Process, class BTNode>
    void preorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            f( node_ptr->data( ) );
            preorder(f, node_ptr->left( ));
            preorder(f, node_ptr->right( ));
        }
    }

    template <class Item, class SizeType>
    void print(binary_tree_node<Item>* node_ptr, SizeType depth)
    // Library facilities used: iomanip, iostream, stdlib
    {
        if (node_ptr != NULL)
        {
            print(node_ptr->right( ), depth+1);
            std::cout << std::setw(4*depth) << ""; // Indent 4*depth spaces.
            std::cout << node_ptr->data( ) << std::endl;
            print(node_ptr->left( ),  depth+1);
        }
    }    
	
    template <class Item>
    void tree_clear(binary_tree_node<Item>*& root_ptr)
    // Library facilities used: cstdlib
    {
	binary_tree_node<Item>* child;
	if (root_ptr != NULL)
	{
	    child = root_ptr->left( );
	    tree_clear( child );
	    child = root_ptr->right( );
	    tree_clear( child );
	    delete root_ptr;
	    root_ptr = NULL;
	}
    }

    template <class Item>
    binary_tree_node<Item>* tree_copy(const binary_tree_node<Item>* root_ptr)
    // Library facilities used: cstdlib
    {
	binary_tree_node<Item> *l_ptr;
	binary_tree_node<Item> *r_ptr;

	if (root_ptr == NULL)
	    return NULL;
	else
	{
	    l_ptr = tree_copy( root_ptr->left( ) );
	    r_ptr = tree_copy( root_ptr->right( ) );
	    return
		new binary_tree_node<Item>( root_ptr->data( ), l_ptr, r_ptr);
	}
    }

    template <class Item>
    size_t tree_size(const binary_tree_node<Item>* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr == NULL)
            return 0;
        else 
            return 
	    1 + tree_size(node_ptr->left( )) + tree_size(node_ptr->right( ));
    }    
}
