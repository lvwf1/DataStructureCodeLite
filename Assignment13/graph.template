// FILE: graph.template (part of the namespace main_savitch_15)
// TEMPLATE CLASS IMPLEMENTED: graph<Item> (See graph.h for documentation.)
// This file is included in the header file and not compiled separately.
// INVARIANT for the graph class:
//   1. The number of vertices in the graph is stored in the member variable
//      many_vertices.
//   1. These vertices are numbered from 0 to many_vertices-1.
//   2. edges is the adjacency matrix for the graph (with true in edges[i][j]
//      to indicate an edge from vertex i to vertex j).
//   3. For each i < many_vertices, labels[i] is the label of vertex i.

#include <cassert>    // Provides assert
#include <cstdlib>    // Provides size_t
#include <set>        // Provides set

using namespace std;

namespace main_savitch_15
{
    template <class Item>
    const std::size_t graph<Item>::MAXIMUM;

    template <class Item>
    void graph<Item>::add_edge(std::size_t source, std::size_t target)
    // Library facilities used: cassert, cstdlib
    {
        assert(source < size( ));
        assert(target < size( ));
        edges[source][target] = true;
    }

    template <class Item>
    void graph<Item>::add_vertex(const Item& label)
    // Library facilities used: cassert, cstdlib
    {
        std::size_t new_vertex_number;
        std::size_t other_number;

        assert(size( ) < MAXIMUM);
        new_vertex_number = many_vertices;
        many_vertices++;
        for (other_number = 0; other_number < many_vertices; ++other_number)
        {
            edges[other_number][new_vertex_number] = false;
            edges[new_vertex_number][other_number] = false;
        }
        labels[new_vertex_number] = label;
    }

    template <class Item>
    bool graph<Item>::is_edge(std::size_t source, std::size_t target) const
    // Library facilities used: cassert, cstdlib
    {
        assert(source < size( ));
        assert(target < size( ));
        return edges[source][target];
    }

    template <class Item>
    Item& graph<Item>::operator[ ] (std::size_t vertex)
    // Library facilities used: cassert, cstdlib
    {
        assert(vertex < size( ));
        return labels[vertex];     // Returns a reference to the label
    }

    template <class Item>
    Item graph<Item>::operator[ ] (std::size_t vertex) const
    // Library facilities used: cassert, cstdlib
    {
        assert(vertex < size( ));
        return labels[vertex];     // Returns only a copy of the label
    }

    template <class Item>
    std::set<std::size_t> graph<Item>::neighbors(std::size_t vertex) const
    // Library facilities used: cassert, cstdlib, set
    {
        std::set<std::size_t> answer;
        std::size_t i;

        assert(vertex < size( ));

        for (i = 0; i < size( ); ++i)
        {
            if (edges[vertex][i])
                answer.insert(i);
        }
        return answer;
    }

    template <class Item>
    void graph<Item>::remove_edge(std::size_t source, std::size_t target)
    // Library facilities used: cassert, cstdlib
    {
        assert(source < size( ));
        assert(target < size( ));
        edges[source][target] = false;
    }
    
    template<class Item>
    void graph<Item>::displaygraph()
    {
        cout<<"  ";
        for(size_t h=0;h<size();h++)//Display the vertices horizontally
        {
            cout<<labels[h]<<" ";
        }
        cout<<endl;
        for(size_t i=0;i<size();i++)
        {
            cout<<labels[i]<<" ";//Display the vertices vertically
            for(size_t j=0;j<size();j++)
            {
                cout<<is_edge(i,j)<<" ";//Display if the edges are existed
            }
            cout<<endl;
        }
    }
    // A recursive function to print all paths from 'current' to 'end'.
    // visited[] keeps track of vertices in current path.
    // path[] stores actual vertices and path_index is current
    // index in path[]
    template<class Item>
    void graph<Item>::printAllPathsUtil(size_t start, size_t end, bool visited[],
                              size_t path[], size_t &path_index)
    {
        // Mark the current node and store it in path[]
        visited[start] = true;
        path[path_index] = start;
        path_index++;
        
        // If current vertex is same as destination, then print
        // current path[]
        if (start == end)
            {
                for (size_t i = 0; i<path_index; i++)
                    if(path[i]!=end)
                        cout << path[i] << "->";
                    else
                        cout << path[i] << endl;
            }
        else // If current vertex is not destination
        {
            set<size_t> s=neighbors(start);
            // Recur for all the vertices adjacent to current vertex
            for (set<size_t>::iterator i = s.begin(); i != s.end(); ++i)
                if (!visited[*i])
                    printAllPathsUtil(*i, end, visited, path, path_index);
        }
        // Remove current vertex from path[] and mark it as unvisited
        path_index--;
        visited[start] = false;
    }
    // Prints all paths from 'start' to 'end'
    template<class Item>
    void graph<Item>::printAllPaths(size_t start, size_t end)
    {
        // Mark all the vertices as not visited
        bool *visited = new bool[size()];
        
        // Create an array to store paths
        size_t *path = new size_t[size()];
        size_t path_index = 0; // Initialize path[] as empty
        
        // Initialize all vertices as not visited
        for (size_t i = 0; i < size(); i++)
            visited[i] = false;
        // Call the recursive helper function to print all paths
        printAllPathsUtil(start, end, visited, path, path_index);
    }
}
	
    
