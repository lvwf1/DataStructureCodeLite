// FILE: graph.template (part of the namespace main_savitch_15)
// TEMPLATE CLASS IMPLEMENTED: graph<Item> (See graph.h for documentation.)
// This file is included in the header file and not compiled separately.
// INVARIANT for the graph class:
//   1. The number of vertices in the graph is stored in the member variable
//      many_vertices.
//   1. These vertices are numbered from 0 to many_vertices-1.
//   2. edges is the adjacency matrix for the graph (with true in edges[i][j]
//      to indicate an edge from vertex i to vertex j).
//   3. For each i < many_vertices, labels[i] is the label of vertex i.

#include <cassert>    // Provides assert
#include <cstdlib>    // Provides size_t
#include <set>        // Provides set

namespace main_savitch_15
{
    template <class Item>
    const std::size_t graph<Item>::MAXIMUM;

    template <class Item>
    void graph<Item>::add_edge(std::size_t source, std::size_t target)
    // Library facilities used: cassert, cstdlib
    {
        assert(source < size( ));
        assert(target < size( ));
        edges[source].insert(target);
    }

    template <class Item>
    void graph<Item>::add_vertex(const Item& label)
    // Library facilities used: cassert, cstdlib
    {
        assert(size( ) < MAXIMUM);
        labels[many_vertices]=label;
        many_vertices++;
    }

    template <class Item>
    bool graph<Item>::is_edge(std::size_t source, std::size_t target) const
    // Library facilities used: cassert, cstdlib
    {
        assert(source < size( ));
        assert(target < size( ));
        return edges[source].find(target)!=edges[source].end();
    }

    template <class Item>
    Item& graph<Item>::operator[ ] (std::size_t vertex)
    // Library facilities used: cassert, cstdlib
    {
        assert(vertex < size( ));
        return labels[vertex];     // Returns a reference to the label
    }

    template <class Item>
    Item graph<Item>::operator[ ] (std::size_t vertex) const
    // Library facilities used: cassert, cstdlib
    {
        assert(vertex < size( ));
        return labels[vertex];     // Returns only a copy of the label
    }

    template <class Item>
    std::set<std::size_t> graph<Item>::neighbors(std::size_t vertex) const
    // Library facilities used: cassert, cstdlib, set
    {
        return edges[vertex];
    }

    template <class Item>
    void graph<Item>::remove_edge(std::size_t source, std::size_t target)
    // Library facilities used: cassert, cstdlib
    {
        assert(source < size( ));
        assert(target < size( ));
        edges[source].erase(target);
    }
    
    template <class Item>
    void graph<Item>::remove_vertex(std::size_t target)
    // Library facilities used: cassert, cstdlib, set
    {
        assert(target<size());
        edges[target].clear();
        for(std::size_t i=0;i<size();i++)
            edges[i].erase(target);
        for(size_t i=target;i<size();i++)
            labels[i]=labels[i+1];
        many_vertices--;
    }
    
    template <class Item>
    void graph<Item>::displaygraph()
    {
        std::cout<<"  ";
        for(size_t h=0;h<size();h++)//Display the vertices horizontally
        {
            std::cout<<labels[h]<<" ";
        }
        std::cout<<std::endl;
        for(size_t i=0;i<size();i++)
        {
            std::cout<<labels[i]<<" ";//Display the vertices vertically
            for(size_t j=0;j<size();j++)
            {
                std::cout<<is_edge(i,j)<<" ";//Display if the edges are existed
            }
            std::cout<<std::endl;
        }
    }
}
	
    
